/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var uni_syntax = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,13],$V2=[4,15,42],$V3=[2,18],$V4=[2,19],$V5=[2,37],$V6=[2,20],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[2,61],$Vd=[1,28],$Ve=[4,13,15,22,42],$Vf=[2,38],$Vg=[2,39],$Vh=[2,64],$Vi=[2,36],$Vj=[1,36],$Vk=[4,13,15,42],$Vl=[2,22],$Vm=[2,41],$Vn=[1,61],$Vo=[1,63],$Vp=[1,70],$Vq=[1,72],$Vr=[1,79],$Vs=[1,81],$Vt=[2,21],$Vu=[2,40],$Vv=[1,92],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,102],$VC=[13,22],$VD=[2,25],$VE=[2,26],$VF=[4,13,15,22,37,38,42],$VG=[2,48],$VH=[4,13,15,22,36,37,38,42],$VI=[2,54],$VJ=[2,55],$VK=[2,56],$VL=[2,57],$VM=[2,58],$VN=[4,13,15,22,38,42],$VO=[2,50],$VP=[1,116],$VQ=[2,52],$VR=[1,123],$VS=[2,47],$VT=[4,13,15,22,31,36,37,38,42],$VU=[2,59],$VV=[2,62],$VW=[2,63],$VX=[1,135],$VY=[2,12],$VZ=[1,143],$V_=[1,149],$V$=[1,165],$V01=[1,167],$V11=[1,174],$V21=[1,176],$V31=[1,183],$V41=[1,185],$V51=[2,23],$V61=[2,24],$V71=[1,193],$V81=[1,197],$V91=[1,199],$Va1=[1,202],$Vb1=[1,203],$Vc1=[1,204],$Vd1=[1,205],$Ve1=[1,206],$Vf1=[1,216],$Vg1=[1,218],$Vh1=[1,221],$Vi1=[2,46],$Vj1=[1,230],$Vk1=[1,232],$Vl1=[1,235],$Vm1=[1,243],$Vn1=[1,246],$Vo1=[1,254],$Vp1=[13,17],$Vq1=[1,259],$Vr1=[13,17,22],$Vs1=[13,22,37,38],$Vt1=[13,22,36,37,38],$Vu1=[13,22,38],$Vv1=[1,276],$Vw1=[1,283],$Vx1=[13,22,31,36,37,38],$Vy1=[2,49],$Vz1=[2,27],$VA1=[1,301],$VB1=[2,28],$VC1=[1,319],$VD1=[1,321],$VE1=[1,328],$VF1=[1,330],$VG1=[1,337],$VH1=[1,339],$VI1=[2,45],$VJ1=[2,51],$VK1=[2,53],$VL1=[2,15],$VM1=[1,363],$VN1=[2,13],$VO1=[2,14],$VP1=[2,35],$VQ1=[1,372],$VR1=[1,376],$VS1=[1,378],$VT1=[1,381],$VU1=[1,391],$VV1=[1,393],$VW1=[1,396],$VX1=[1,405],$VY1=[1,407],$VZ1=[1,410],$V_1=[1,418],$V$1=[1,421],$V02=[1,429],$V12=[2,44],$V22=[2,43],$V32=[13,17,22,37,38],$V42=[13,17,22,36,37,38],$V52=[13,17,22,38],$V62=[1,448],$V72=[1,455],$V82=[2,42],$V92=[1,466],$Va2=[1,475],$Vb2=[1,484],$Vc2=[1,491],$Vd2=[13,17,22,31,36,37,38],$Ve2=[2,29],$Vf2=[2,31],$Vg2=[2,30],$Vh2=[2,32],$Vi2=[1,528],$Vj2=[1,532],$Vk2=[1,534],$Vl2=[1,537],$Vm2=[1,547],$Vn2=[1,549],$Vo2=[1,552],$Vp2=[1,561],$Vq2=[1,563],$Vr2=[1,566],$Vs2=[1,574],$Vt2=[1,577],$Vu2=[2,16],$Vv2=[2,17],$Vw2=[1,589],$Vx2=[1,600],$Vy2=[1,609],$Vz2=[1,618],$VA2=[1,625],$VB2=[1,680],$VC2=[1,689],$VD2=[1,698],$VE2=[1,705];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"fragment":3,"EOF":4,"groups":5,"group":6,"vertical_group":7,"horizontal_group":8,"basic_group":9,"sign":10,"vert_subgroup":11,"rest_vert_group":12,"VERT":13,"br_vertical_group":14,"BEGIN":15,"rest_br_vert_group":16,"END":17,"br_flat_vertical_group":18,"rest_br_flat_vert_group":19,"hor_subgroup":20,"rest_hor_group":21,"HOR":22,"br_horizontal_group":23,"rest_br_hor_group":24,"br_flat_horizontal_group":25,"rest_br_flat_hor_group":26,"core_group":27,"insertion_group":28,"insertion":29,"br_insertion_group":30,"ST":31,"in_subgroup":32,"opt_sb_insertion":33,"opt_et_insertion":34,"opt_eb_insertion":35,"SB":36,"ET":37,"EB":38,"flat_horizontal_group":39,"OVERLAY":40,"flat_vertical_group":41,"SIGN":42,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",13:"VERT",15:"BEGIN",17:"END",22:"HOR",31:"ST",36:"SB",37:"ET",38:"EB",40:"OVERLAY",42:"SIGN"},
productions_: [0,[3,1],[3,2],[5,1],[5,2],[6,1],[6,1],[6,1],[6,1],[7,2],[12,3],[12,2],[14,3],[16,3],[16,3],[18,3],[19,3],[19,3],[11,1],[11,1],[11,1],[8,2],[8,2],[21,3],[21,3],[21,2],[21,2],[23,3],[23,3],[24,3],[24,3],[24,3],[24,3],[25,3],[26,3],[26,3],[20,1],[20,1],[9,1],[9,1],[28,2],[28,2],[30,4],[30,4],[29,5],[29,4],[29,3],[29,2],[33,0],[33,2],[34,0],[34,2],[35,0],[35,2],[32,1],[32,1],[32,1],[32,1],[32,1],[27,3],[39,1],[39,1],[41,1],[41,1],[10,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return UniFragment.makeFragment(null);
break;
case 2:
return UniFragment.makeFragment($$[$0-1]);
break;
case 3: case 5: case 6: case 7: case 8: case 18: case 19: case 20: case 36: case 37: case 38: case 39: case 49: case 51: case 53: case 54: case 55: case 56: case 57: case 58: case 60: case 61: case 62: case 63:
this.$ = $$[$0];
break;
case 4:
this.$ = UniFragment.addGroup($$[$0-1], $$[$0]);
break;
case 9: case 12: case 15:
this.$ = UniFragment.makeVerticalGroup([$$[$0-1]].concat($$[$0]));
break;
case 10: case 13: case 16: case 23: case 24: case 29: case 30: case 34:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 11: case 25: case 26:
this.$ = [$$[$0]];
break;
case 14: case 17: case 31: case 32: case 35:
this.$ = [$$[$0-1]];
break;
case 21: case 22: case 27: case 28: case 33:
this.$ = UniFragment.makeHorizontalGroup([$$[$0-1]].concat($$[$0]));
break;
case 40: case 41:
this.$ = UniFragment.makeInsertionGroup($$[$0-1], $$[$0]);
break;
case 42: case 43:
this.$ = UniFragment.makeInsertionGroup($$[$0-2], $$[$0-1]);
break;
case 44:
this.$ = [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]];
break;
case 45:
this.$ = [null, $$[$0-2], $$[$0-1], $$[$0]];
break;
case 46:
this.$ = [null, null, $$[$0-1], $$[$0]];
break;
case 47:
this.$ = [null, null, null, $$[$0]];
break;
case 48: case 50: case 52:
this.$ = null;
break;
case 59:
this.$ = UniFragment.makeCoreGroup($$[$0-2], $$[$0]);
break;
case 64:
this.$ = UniFragment.makeSign(yytext);
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:9,14:14,15:$V0,20:10,25:17,27:11,28:12,39:15,42:$V1},{1:[3]},{1:[2,1]},{4:[1,18]},{4:[2,3],5:19,6:4,7:5,8:6,9:7,10:8,11:9,14:14,15:$V0,20:10,25:17,27:11,28:12,39:15,42:$V1},o($V2,[2,5]),o($V2,[2,6],{13:$V3}),o($V2,[2,7],{13:$V4,22:$V5}),o($V2,[2,8],{21:20,29:21,13:$V6,22:$V7,31:$V8,36:$V9,37:$Va,38:$Vb,40:$Vc}),{12:27,13:$Vd},{21:29,22:$V7},o($Ve,$Vf,{29:30,31:$V8,36:$V9,37:$Va,38:$Vb}),o($Ve,$Vg),o([4,13,15,22,31,36,37,38,40,42],$Vh),{22:$Vi},{40:[1,31]},{8:34,9:35,10:33,11:32,14:14,15:$V0,20:37,25:17,27:38,28:39,39:40,42:$Vj},{40:[2,60]},{1:[2,2]},{4:[2,4]},o($Vk,$Vl),o($Ve,$Vm),{9:44,10:42,14:43,15:[1,45],20:41,25:17,27:11,28:12,39:15,42:$V1},{10:51,14:47,15:[1,52],23:48,25:17,27:50,30:49,32:46,39:53,42:[1,54]},{10:60,14:56,15:$Vn,23:57,25:17,27:59,30:58,32:55,39:62,42:$Vo},{10:69,14:65,15:$Vp,23:66,25:17,27:68,30:67,32:64,39:71,42:$Vq},{10:78,14:74,15:$Vr,23:75,25:17,27:77,30:76,32:73,39:80,42:$Vs},o($V2,[2,9]),{8:83,9:84,10:85,11:82,14:14,15:$V0,20:10,25:17,27:11,28:12,39:15,42:$V1},o($Vk,$Vt),o($Ve,$Vu),{10:88,15:[1,89],18:87,41:86,42:[1,90]},{13:$Vv,16:91},{13:$V6,21:94,22:$Vw,26:93,29:95,31:$Vx,36:$Vy,37:$Vz,38:$VA,40:$Vc},{13:$V3},{13:$V4,22:$V5},o([13,22,31,36,37,38,40],$Vh),{21:101,22:$VB},o($VC,$Vf,{29:103,31:$Vx,36:$Vy,37:$Vz,38:$VA}),o($VC,$Vg),{40:[1,104]},o($Vk,$VD,{21:105,22:$V7}),o($Vk,$VE,{29:21,21:106,22:$V7,31:$V8,36:$V9,37:$Va,38:$Vb,40:$Vc}),o($Ve,$Vi),o($Ve,$V5),{8:34,9:35,10:33,11:107,14:14,15:$V0,20:37,25:17,27:38,28:39,39:40,42:$Vj},o($VF,$VG,{33:108,36:[1,109]}),o($VH,$VI),o($VH,$VJ),o($VH,$VK),o($VH,$VL),o($VH,$VM,{40:$Vc}),{8:34,9:35,10:112,11:110,14:14,15:$V0,20:111,25:17,27:113,28:39,39:40,42:$Vj},{40:[1,114]},o([4,13,15,22,36,37,38,40,42],$Vh),o($VN,$VO,{34:115,37:$VP}),o($VF,$VI),o($VF,$VJ),o($VF,$VK),o($VF,$VL),o($VF,$VM,{40:$Vc}),{8:34,9:35,10:119,11:117,14:14,15:$V0,20:118,25:17,27:120,28:39,39:40,42:$Vj},{40:[1,121]},o([4,13,15,22,37,38,40,42],$Vh),o($Ve,$VQ,{35:122,38:$VR}),o($VN,$VI),o($VN,$VJ),o($VN,$VK),o($VN,$VL),o($VN,$VM,{40:$Vc}),{8:34,9:35,10:126,11:124,14:14,15:$V0,20:125,25:17,27:127,28:39,39:40,42:$Vj},{40:[1,128]},o([4,13,15,22,38,40,42],$Vh),o($Ve,$VS),o($Ve,$VI),o($Ve,$VJ),o($Ve,$VK),o($Ve,$VL),o($Ve,$VM,{40:$Vc}),{8:34,9:35,10:130,11:107,14:14,15:$V0,20:129,25:17,27:131,28:39,39:40,42:$Vj},{40:[1,132]},o([4,13,15,22,40,42],$Vh),o($V2,[2,11],{12:133,13:$Vd}),o($Vk,$V3),o($Vk,$V4,{22:$V5}),o($Vk,$V6,{21:20,29:21,22:$V7,31:$V8,36:$V9,37:$Va,38:$Vb,40:$Vc}),o($VT,$VU),o($VT,$VV),o($VT,$VW),{10:134,42:$VX},o($VT,$Vh),{22:$VY},{8:137,9:138,10:139,11:136,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},{40:[2,33]},{13:$Vl},o($VC,$Vm),{9:148,10:145,14:147,15:$V_,20:146,25:17,27:38,28:39,39:40,42:$VZ},{10:155,14:151,15:[1,156],23:152,25:17,27:154,30:153,32:150,39:157,42:[1,158]},{10:164,14:160,15:$V$,23:161,25:17,27:163,30:162,32:159,39:166,42:$V01},{10:173,14:169,15:$V11,23:170,25:17,27:172,30:171,32:168,39:175,42:$V21},{10:182,14:178,15:$V31,23:179,25:17,27:181,30:180,32:177,39:184,42:$V41},{13:$Vt},{9:148,10:186,14:147,15:$V_,20:146,25:17,27:38,28:39,39:40,42:$Vj},o($VC,$Vu),{10:189,15:[1,190],18:188,41:187,42:[1,191]},o($Vk,$V51),o($Vk,$V61),{13:$V71,16:192},o($VN,$VO,{34:194,37:$VP}),{10:60,14:56,15:$Vn,23:57,25:17,27:59,30:58,32:195,39:62,42:$Vo},{13:$V81,16:196},{21:101,22:$V91,24:198},{13:$V6,21:94,22:$Va1,24:200,26:93,29:201,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:207,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:210,15:[1,211],18:209,41:208,42:[1,212]},o($Ve,$VQ,{35:213,38:$VR}),{10:69,14:65,15:$Vp,23:66,25:17,27:68,30:67,32:214,39:71,42:$Vq},{13:$Vf1,16:215},{21:101,22:$Vg1,24:217},{13:$V6,21:94,22:$Vh1,24:219,26:93,29:220,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:222,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:225,15:[1,226],18:224,41:223,42:[1,227]},o($Ve,$Vi1),{10:78,14:74,15:$Vr,23:75,25:17,27:77,30:76,32:228,39:80,42:$Vs},{13:$Vj1,16:229},{21:101,22:$Vk1,24:231},{13:$V6,21:94,22:$Vl1,24:233,26:93,29:234,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:236,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:239,15:[1,240],18:238,41:237,42:[1,241]},{21:101,22:$Vm1,24:242},{13:$V6,21:94,22:$Vn1,24:244,26:93,29:245,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:247,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:250,15:[1,251],18:249,41:248,42:[1,252]},o($V2,[2,10]),{13:$Vo1,19:253},{13:$Vh},{13:$Vv,16:255,17:[1,256]},o($Vp1,$V3),o($Vp1,$V4,{22:$V5}),o($Vp1,$V6,{21:257,29:258,22:$Vq1,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc}),{21:260,22:$Vq1},o($Vr1,$Vf,{29:261,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),o($Vr1,$Vg),o([13,17,22,31,36,37,38,40],$Vh),{40:[1,262]},{13:$VE,17:[1,264],21:265,22:$Vw,26:263,29:95,31:$Vx,36:$Vy,37:$Vz,38:$VA,40:$Vc},{13:$VD,21:266,22:$VB},o($VC,$Vi),o($VC,$V5),{8:34,9:35,10:33,11:267,14:14,15:$V0,20:37,25:17,27:38,28:39,39:40,42:$Vj},o($Vs1,$VG,{33:268,36:[1,269]}),o($Vt1,$VI),o($Vt1,$VJ),o($Vt1,$VK),o($Vt1,$VL),o($Vt1,$VM,{40:$Vc}),{8:34,9:35,10:272,11:270,14:14,15:$V0,20:271,25:17,27:273,28:39,39:40,42:$Vj},{40:[1,274]},o([13,22,36,37,38,40],$Vh),o($Vu1,$VO,{34:275,37:$Vv1}),o($Vs1,$VI),o($Vs1,$VJ),o($Vs1,$VK),o($Vs1,$VL),o($Vs1,$VM,{40:$Vc}),{8:34,9:35,10:279,11:277,14:14,15:$V0,20:278,25:17,27:280,28:39,39:40,42:$Vj},{40:[1,281]},o([13,22,37,38,40],$Vh),o($VC,$VQ,{35:282,38:$Vw1}),o($Vu1,$VI),o($Vu1,$VJ),o($Vu1,$VK),o($Vu1,$VL),o($Vu1,$VM,{40:$Vc}),{8:34,9:35,10:286,11:284,14:14,15:$V0,20:285,25:17,27:287,28:39,39:40,42:$Vj},{40:[1,288]},o([13,22,38,40],$Vh),o($VC,$VS),o($VC,$VI),o($VC,$VJ),o($VC,$VK),o($VC,$VL),o($VC,$VM,{40:$Vc}),{8:34,9:35,10:290,11:267,14:14,15:$V0,20:289,25:17,27:291,28:39,39:40,42:$Vj},{40:[1,292]},o([13,22,40],$Vh),{13:$VE,21:265,22:$VB,29:95,31:$Vx,36:$Vy,37:$Vz,38:$VA,40:$Vc},o($Vx1,$VU),o($Vx1,$VV),o($Vx1,$VW),{10:293,42:$VX},o($Vx1,$Vh),o($Ve,$VY),{8:137,9:138,10:139,11:294,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($Ve,$VQ,{35:295,38:$VR}),o($VF,$Vy1),o($VH,$VY),{8:137,9:138,10:139,11:296,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($VH,$Vz1),{9:300,10:298,14:299,15:$VA1,20:297,25:17,27:141,28:142,39:144,42:$VZ},o($VH,$VB1),o($VC,$Vm,{17:[1,302]}),{9:300,10:303,14:299,15:$VA1,20:297,25:17,27:141,28:142,39:144,42:$VZ},{10:309,14:305,15:[1,310],23:306,25:17,27:308,30:307,32:304,39:311,42:[1,312]},{10:318,14:314,15:$VC1,23:315,25:17,27:317,30:316,32:313,39:320,42:$VD1},{10:327,14:323,15:$VE1,23:324,25:17,27:326,30:325,32:322,39:329,42:$VF1},{10:336,14:332,15:$VG1,23:333,25:17,27:335,30:334,32:331,39:338,42:$VH1},o($VC,$Vu,{17:[1,340]}),o($VH,$VU),o($VH,$VV),o($VH,$VW),{10:341,42:$VX},o($VH,$Vh),o($Ve,$VI1),o($VN,$VJ1),o($VF,$VY),{8:137,9:138,10:139,11:342,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($VF,$Vz1),{9:300,10:344,14:299,15:$VA1,20:343,25:17,27:141,28:142,39:144,42:$VZ},o($VF,$VB1),o($VC,$Vm,{17:[1,345]}),{9:300,10:346,14:299,15:$VA1,20:343,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,347]}),o($VF,$VU),o($VF,$VV),o($VF,$VW),{10:348,42:$VX},o($VF,$Vh),o($Ve,$VK1),o($VN,$VY),{8:137,9:138,10:139,11:349,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($VN,$Vz1),{9:300,10:351,14:299,15:$VA1,20:350,25:17,27:141,28:142,39:144,42:$VZ},o($VN,$VB1),o($VC,$Vm,{17:[1,352]}),{9:300,10:353,14:299,15:$VA1,20:350,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,354]}),o($VN,$VU),o($VN,$VV),o($VN,$VW),{10:355,42:$VX},o($VN,$Vh),o($Ve,$Vz1),{9:300,10:357,14:299,15:$VA1,20:356,25:17,27:141,28:142,39:144,42:$VZ},o($Ve,$VB1),o($VC,$Vm,{17:[1,358]}),{9:300,10:359,14:299,15:$VA1,20:356,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,360]}),o($Ve,$VU),o($Ve,$VV),o($Ve,$VW),{10:361,42:$VX},o($Ve,$Vh),o($VT,$VL1),{10:362,42:$VM1},{22:$VN1},{22:$VO1},o($Vp1,$Vl),o($Vr1,$Vm),{9:300,10:365,14:299,15:$VA1,20:364,25:17,27:141,28:142,39:144,42:$VZ},o($Vp1,$Vt),o($Vr1,$Vu),{10:368,15:[1,369],18:367,41:366,42:[1,370]},{40:[2,34]},{40:$VP1},{13:$V61},{13:$V51},{13:$VQ1,16:371},o($Vu1,$VO,{34:373,37:$Vv1}),{10:164,14:160,15:$V$,23:161,25:17,27:163,30:162,32:374,39:166,42:$V01},{13:$VR1,16:375},{21:101,22:$VS1,24:377},{13:$V6,21:94,22:$VT1,24:379,26:93,29:380,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:382,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:385,15:[1,386],18:384,41:383,42:[1,387]},o($VC,$VQ,{35:388,38:$Vw1}),{10:173,14:169,15:$V11,23:170,25:17,27:172,30:171,32:389,39:175,42:$V21},{13:$VU1,16:390},{21:101,22:$VV1,24:392},{13:$V6,21:94,22:$VW1,24:394,26:93,29:395,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:397,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:400,15:[1,401],18:399,41:398,42:[1,402]},o($VC,$Vi1),{10:182,14:178,15:$V31,23:179,25:17,27:181,30:180,32:403,39:184,42:$V41},{13:$VX1,16:404},{21:101,22:$VY1,24:406},{13:$V6,21:94,22:$VZ1,24:408,26:93,29:409,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:411,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:414,15:[1,415],18:413,41:412,42:[1,416]},{21:101,22:$V_1,24:417},{13:$V6,21:94,22:$V$1,24:419,26:93,29:420,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:422,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:425,15:[1,426],18:424,41:423,42:[1,427]},{13:$V02,19:428},{13:$V71,16:430,17:[1,431]},o($Ve,$V12),{13:$V81,16:432,17:[1,433]},{13:$VD,17:[1,435],21:266,22:$V91,24:434},{13:$VE,17:[1,437],21:265,22:$V91,24:436,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vr1,$Vi),o($Vr1,$V5),{8:34,9:35,10:33,11:438,14:14,15:$V0,20:37,25:17,27:38,28:39,39:40,42:$Vj},o($VH,$V22),{13:$VE,17:[1,439],21:265,22:$Va1,24:436,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($V32,$VG,{33:440,36:[1,441]}),o($V42,$VI),o($V42,$VJ),o($V42,$VK),o($V42,$VL),o($V42,$VM,{40:$Vc}),{8:34,9:35,10:444,11:442,14:14,15:$V0,20:443,25:17,27:445,28:39,39:40,42:$Vj},{40:[1,446]},o([13,17,22,36,37,38,40],$Vh),o($V52,$VO,{34:447,37:$V62}),o($V32,$VI),o($V32,$VJ),o($V32,$VK),o($V32,$VL),o($V32,$VM,{40:$Vc}),{8:34,9:35,10:451,11:449,14:14,15:$V0,20:450,25:17,27:452,28:39,39:40,42:$Vj},{40:[1,453]},o([13,17,22,37,38,40],$Vh),o($Vr1,$VQ,{35:454,38:$V72}),o($V52,$VI),o($V52,$VJ),o($V52,$VK),o($V52,$VL),o($V52,$VM,{40:$Vc}),{8:34,9:35,10:458,11:456,14:14,15:$V0,20:457,25:17,27:459,28:39,39:40,42:$Vj},{40:[1,460]},o([13,17,22,38,40],$Vh),o($Vr1,$VS),o($Vr1,$VI),o($Vr1,$VJ),o($Vr1,$VK),o($Vr1,$VL),o($Vr1,$VM,{40:$Vc}),{8:34,9:35,10:462,11:438,14:14,15:$V0,20:461,25:17,27:463,28:39,39:40,42:$Vj},{40:[1,464]},o([13,17,22,40],$Vh),o($VH,$V82),{13:$V92,19:465},{13:$Vf1,16:467,17:[1,468]},{13:$VD,17:[1,470],21:266,22:$Vg1,24:469},{13:$VE,17:[1,472],21:265,22:$Vg1,24:471,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VF,$V22),{13:$VE,17:[1,473],21:265,22:$Vh1,24:471,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VF,$V82),{13:$Va2,19:474},{13:$Vj1,16:476,17:[1,477]},{13:$VD,17:[1,479],21:266,22:$Vk1,24:478},{13:$VE,17:[1,481],21:265,22:$Vk1,24:480,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VN,$V22),{13:$VE,17:[1,482],21:265,22:$Vl1,24:480,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VN,$V82),{13:$Vb2,19:483},{13:$VD,17:[1,486],21:266,22:$Vm1,24:485},{13:$VE,17:[1,488],21:265,22:$Vm1,24:487,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Ve,$V22),{13:$VE,17:[1,489],21:265,22:$Vn1,24:487,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Ve,$V82),{13:$Vc2,19:490},{13:$Vo1,17:[1,493],19:492},o($Vp1,$Vh),o($Vp1,$VD,{21:494,22:$Vq1}),o($Vp1,$VE,{29:258,21:495,22:$Vq1,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc}),o($Vd2,$VU),o($Vd2,$VV),o($Vd2,$VW),{10:496,42:$VX},o($Vd2,$Vh),o($VC,$VY),{8:137,9:138,10:139,11:497,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$VQ,{35:498,38:$Vw1}),o($Vs1,$Vy1),o($Vt1,$VY),{8:137,9:138,10:139,11:499,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($Vt1,$Vz1),{9:300,10:501,14:299,15:$VA1,20:500,25:17,27:141,28:142,39:144,42:$VZ},o($Vt1,$VB1),o($VC,$Vm,{17:[1,502]}),{9:300,10:503,14:299,15:$VA1,20:500,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,504]}),o($Vt1,$VU),o($Vt1,$VV),o($Vt1,$VW),{10:505,42:$VX},o($Vt1,$Vh),o($VC,$VI1),o($Vu1,$VJ1),o($Vs1,$VY),{8:137,9:138,10:139,11:506,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($Vs1,$Vz1),{9:300,10:508,14:299,15:$VA1,20:507,25:17,27:141,28:142,39:144,42:$VZ},o($Vs1,$VB1),o($VC,$Vm,{17:[1,509]}),{9:300,10:510,14:299,15:$VA1,20:507,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,511]}),o($Vs1,$VU),o($Vs1,$VV),o($Vs1,$VW),{10:512,42:$VX},o($Vs1,$Vh),o($VC,$VK1),o($Vu1,$VY),{8:137,9:138,10:139,11:513,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($Vu1,$Vz1),{9:300,10:515,14:299,15:$VA1,20:514,25:17,27:141,28:142,39:144,42:$VZ},o($Vu1,$VB1),o($VC,$Vm,{17:[1,516]}),{9:300,10:517,14:299,15:$VA1,20:514,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,518]}),o($Vu1,$VU),o($Vu1,$VV),o($Vu1,$VW),{10:519,42:$VX},o($Vu1,$Vh),o($VC,$Vz1),{9:300,10:521,14:299,15:$VA1,20:520,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$VB1),o($VC,$Vm,{17:[1,522]}),{9:300,10:523,14:299,15:$VA1,20:520,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,524]}),o($VC,$VU),o($VC,$VV),o($VC,$VW),{10:525,42:$VX},o($VC,$Vh),o($Vx1,$VL1),{10:526,42:$VM1},o($Ve,$VN1),o($Ve,$VO1),o($VH,$VN1),o($VH,$VO1),o($VH,$Ve2),o($VH,$Vf2),o($VH,$Vg2),o($VH,$Vh2),{13:$Vi2,16:527},o($VH,$Vh2,{40:$VP1}),o($V52,$VO,{34:529,37:$V62}),{10:318,14:314,15:$VC1,23:315,25:17,27:317,30:316,32:530,39:320,42:$VD1},{13:$Vj2,16:531},{21:101,22:$Vk2,24:533},{13:$V6,21:94,22:$Vl2,24:535,26:93,29:536,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:538,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:541,15:[1,542],18:540,41:539,42:[1,543]},o($Vr1,$VQ,{35:544,38:$V72}),{10:327,14:323,15:$VE1,23:324,25:17,27:326,30:325,32:545,39:329,42:$VF1},{13:$Vm2,16:546},{21:101,22:$Vn2,24:548},{13:$V6,21:94,22:$Vo2,24:550,26:93,29:551,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:553,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:556,15:[1,557],18:555,41:554,42:[1,558]},o($Vr1,$Vi1),{10:336,14:332,15:$VG1,23:333,25:17,27:335,30:334,32:559,39:338,42:$VH1},{13:$Vp2,16:560},{21:101,22:$Vq2,24:562},{13:$V6,21:94,22:$Vr2,24:564,26:93,29:565,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:567,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:570,15:[1,571],18:569,41:568,42:[1,572]},{21:101,22:$Vs2,24:573},{13:$V6,21:94,22:$Vt2,24:575,26:93,29:576,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$Vf,{29:578,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1}),{10:581,15:[1,582],18:580,41:579,42:[1,583]},o($VH,$VL1),{10:584,42:$VM1},o($VF,$VN1),o($VF,$VO1),o($VF,$Ve2),o($VF,$Vf2),o($VF,$Vg2),o($VF,$Vh2),o($VF,$Vh2,{40:$VP1}),o($VF,$VL1),{10:585,42:$VM1},o($VN,$VN1),o($VN,$VO1),o($VN,$Ve2),o($VN,$Vf2),o($VN,$Vg2),o($VN,$Vh2),o($VN,$Vh2,{40:$VP1}),o($VN,$VL1),{10:586,42:$VM1},o($Ve,$Ve2),o($Ve,$Vf2),o($Ve,$Vg2),o($Ve,$Vh2),o($Ve,$Vh2,{40:$VP1}),o($Ve,$VL1),{10:587,42:$VM1},o($VT,$Vu2),o($VT,$Vv2),o($Vp1,$V51),o($Vp1,$V61),{13:$Vw2,19:588},{13:$VQ1,16:590,17:[1,591]},o($VC,$V12),{13:$VR1,16:592,17:[1,593]},{13:$VD,17:[1,595],21:266,22:$VS1,24:594},{13:$VE,17:[1,597],21:265,22:$VS1,24:596,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vt1,$V22),{13:$VE,17:[1,598],21:265,22:$VT1,24:596,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vt1,$V82),{13:$Vx2,19:599},{13:$VU1,16:601,17:[1,602]},{13:$VD,17:[1,604],21:266,22:$VV1,24:603},{13:$VE,17:[1,606],21:265,22:$VV1,24:605,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vs1,$V22),{13:$VE,17:[1,607],21:265,22:$VW1,24:605,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vs1,$V82),{13:$Vy2,19:608},{13:$VX1,16:610,17:[1,611]},{13:$VD,17:[1,613],21:266,22:$VY1,24:612},{13:$VE,17:[1,615],21:265,22:$VY1,24:614,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vu1,$V22),{13:$VE,17:[1,616],21:265,22:$VZ1,24:614,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vu1,$V82),{13:$Vz2,19:617},{13:$VD,17:[1,620],21:266,22:$V_1,24:619},{13:$VE,17:[1,622],21:265,22:$V_1,24:621,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$V22),{13:$VE,17:[1,623],21:265,22:$V$1,24:621,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($VC,$V82),{13:$VA2,19:624},{13:$V02,17:[1,627],19:626},o($Vr1,$VY),{8:137,9:138,10:139,11:628,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($Vr1,$VQ,{35:629,38:$V72}),o($V32,$Vy1),o($V42,$VY),{8:137,9:138,10:139,11:630,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($V42,$Vz1),{9:300,10:632,14:299,15:$VA1,20:631,25:17,27:141,28:142,39:144,42:$VZ},o($V42,$VB1),o($VC,$Vm,{17:[1,633]}),{9:300,10:634,14:299,15:$VA1,20:631,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,635]}),o($V42,$VU),o($V42,$VV),o($V42,$VW),{10:636,42:$VX},o($V42,$Vh),o($Vr1,$VI1),o($V52,$VJ1),o($V32,$VY),{8:137,9:138,10:139,11:637,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($V32,$Vz1),{9:300,10:639,14:299,15:$VA1,20:638,25:17,27:141,28:142,39:144,42:$VZ},o($V32,$VB1),o($VC,$Vm,{17:[1,640]}),{9:300,10:641,14:299,15:$VA1,20:638,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,642]}),o($V32,$VU),o($V32,$VV),o($V32,$VW),{10:643,42:$VX},o($V32,$Vh),o($Vr1,$VK1),o($V52,$VY),{8:137,9:138,10:139,11:644,14:14,15:$V0,20:140,25:17,27:141,28:142,39:144,42:$VZ},o($V52,$Vz1),{9:300,10:646,14:299,15:$VA1,20:645,25:17,27:141,28:142,39:144,42:$VZ},o($V52,$VB1),o($VC,$Vm,{17:[1,647]}),{9:300,10:648,14:299,15:$VA1,20:645,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,649]}),o($V52,$VU),o($V52,$VV),o($V52,$VW),{10:650,42:$VX},o($V52,$Vh),o($Vr1,$Vz1),{9:300,10:652,14:299,15:$VA1,20:651,25:17,27:141,28:142,39:144,42:$VZ},o($Vr1,$VB1),o($VC,$Vm,{17:[1,653]}),{9:300,10:654,14:299,15:$VA1,20:651,25:17,27:141,28:142,39:144,42:$VZ},o($VC,$Vu,{17:[1,655]}),o($Vr1,$VU),o($Vr1,$VV),o($Vr1,$VW),{10:656,42:$VX},o($Vr1,$Vh),{13:$V92,17:[1,658],19:657},{13:$Va2,17:[1,660],19:659},{13:$Vb2,17:[1,662],19:661},{13:$Vc2,17:[1,664],19:663},o($Vd2,$VL1),{10:665,42:$VM1},o($VC,$VN1),o($VC,$VO1),o($Vt1,$VN1),o($Vt1,$VO1),o($Vt1,$Ve2),o($Vt1,$Vf2),o($Vt1,$Vg2),o($Vt1,$Vh2),o($Vt1,$Vh2,{40:$VP1}),o($Vt1,$VL1),{10:666,42:$VM1},o($Vs1,$VN1),o($Vs1,$VO1),o($Vs1,$Ve2),o($Vs1,$Vf2),o($Vs1,$Vg2),o($Vs1,$Vh2),o($Vs1,$Vh2,{40:$VP1}),o($Vs1,$VL1),{10:667,42:$VM1},o($Vu1,$VN1),o($Vu1,$VO1),o($Vu1,$Ve2),o($Vu1,$Vf2),o($Vu1,$Vg2),o($Vu1,$Vh2),o($Vu1,$Vh2,{40:$VP1}),o($Vu1,$VL1),{10:668,42:$VM1},o($VC,$Ve2),o($VC,$Vf2),o($VC,$Vg2),o($VC,$Vh2),o($VC,$Vh2,{40:$VP1}),o($VC,$VL1),{10:669,42:$VM1},o($Vx1,$Vu2),o($Vx1,$Vv2),{13:$Vi2,16:670,17:[1,671]},o($Vr1,$V12),{13:$Vj2,16:672,17:[1,673]},{13:$VD,17:[1,675],21:266,22:$Vk2,24:674},{13:$VE,17:[1,677],21:265,22:$Vk2,24:676,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($V42,$V22),{13:$VE,17:[1,678],21:265,22:$Vl2,24:676,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($V42,$V82),{13:$VB2,19:679},{13:$Vm2,16:681,17:[1,682]},{13:$VD,17:[1,684],21:266,22:$Vn2,24:683},{13:$VE,17:[1,686],21:265,22:$Vn2,24:685,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($V32,$V22),{13:$VE,17:[1,687],21:265,22:$Vo2,24:685,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($V32,$V82),{13:$VC2,19:688},{13:$Vp2,16:690,17:[1,691]},{13:$VD,17:[1,693],21:266,22:$Vq2,24:692},{13:$VE,17:[1,695],21:265,22:$Vq2,24:694,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($V52,$V22),{13:$VE,17:[1,696],21:265,22:$Vr2,24:694,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($V52,$V82),{13:$VD2,19:697},{13:$VD,17:[1,700],21:266,22:$Vs2,24:699},{13:$VE,17:[1,702],21:265,22:$Vs2,24:701,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vr1,$V22),{13:$VE,17:[1,703],21:265,22:$Vt2,24:701,26:263,29:258,31:$Vb1,36:$Vc1,37:$Vd1,38:$Ve1,40:$Vc},o($Vr1,$V82),{13:$VE2,19:704},o($VH,$Vu2),o($VH,$Vv2),o($VF,$Vu2),o($VF,$Vv2),o($VN,$Vu2),o($VN,$Vv2),o($Ve,$Vu2),o($Ve,$Vv2),{13:$Vw2,17:[1,707],19:706},{13:$Vx2,17:[1,709],19:708},{13:$Vy2,17:[1,711],19:710},{13:$Vz2,17:[1,713],19:712},{13:$VA2,17:[1,715],19:714},o($Vr1,$VN1),o($Vr1,$VO1),o($V42,$VN1),o($V42,$VO1),o($V42,$Ve2),o($V42,$Vf2),o($V42,$Vg2),o($V42,$Vh2),o($V42,$Vh2,{40:$VP1}),o($V42,$VL1),{10:716,42:$VM1},o($V32,$VN1),o($V32,$VO1),o($V32,$Ve2),o($V32,$Vf2),o($V32,$Vg2),o($V32,$Vh2),o($V32,$Vh2,{40:$VP1}),o($V32,$VL1),{10:717,42:$VM1},o($V52,$VN1),o($V52,$VO1),o($V52,$Ve2),o($V52,$Vf2),o($V52,$Vg2),o($V52,$Vh2),o($V52,$Vh2,{40:$VP1}),o($V52,$VL1),{10:718,42:$VM1},o($Vr1,$Ve2),o($Vr1,$Vf2),o($Vr1,$Vg2),o($Vr1,$Vh2),o($Vr1,$Vh2,{40:$VP1}),o($Vr1,$VL1),{10:719,42:$VM1},o($Vd2,$Vu2),o($Vd2,$Vv2),o($Vt1,$Vu2),o($Vt1,$Vv2),o($Vs1,$Vu2),o($Vs1,$Vv2),o($Vu1,$Vu2),o($Vu1,$Vv2),o($VC,$Vu2),o($VC,$Vv2),{13:$VB2,17:[1,721],19:720},{13:$VC2,17:[1,723],19:722},{13:$VD2,17:[1,725],19:724},{13:$VE2,17:[1,727],19:726},o($V42,$Vu2),o($V42,$Vv2),o($V32,$Vu2),o($V32,$Vv2),o($V52,$Vu2),o($V52,$Vv2),o($Vr1,$Vu2),o($Vr1,$Vv2)],
defaultActions: {2:[2,1],14:[2,36],17:[2,60],18:[2,2],19:[2,4],34:[2,18],91:[2,12],93:[2,33],94:[2,22],101:[2,21],135:[2,64],255:[2,13],256:[2,14],263:[2,34],264:[2,35],265:[2,24],266:[2,23]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 42
break;
case 1:return 13
break;
case 2:return 22
break;
case 3:return 31
break;
case 4:return 36
break;
case 5:return 37
break;
case 6:return 38
break;
case 7:return 40
break;
case 8:return 15
break;
case 9:return 17
break;
case 10:return 4;
break;
}
},
rules: [/^(?:[\uE000-\uE42E])/,/^(?:\uE430)/,/^(?:\uE431)/,/^(?:\uE432)/,/^(?:\uE433)/,/^(?:\uE434)/,/^(?:\uE435)/,/^(?:\uE436)/,/^(?:\uE437)/,/^(?:\uE438)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = uni_syntax;
exports.Parser = uni_syntax.Parser;
exports.parse = function () { return uni_syntax.parse.apply(uni_syntax, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}